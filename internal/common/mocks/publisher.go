// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	eventsourcing "github.com/digitalmonsters/go-common/eventsourcing"
	mock "github.com/stretchr/testify/mock"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher[T eventsourcing.IEventData] struct {
	mock.Mock
}

type MockPublisher_Expecter[T eventsourcing.IEventData] struct {
	mock *mock.Mock
}

func (_m *MockPublisher[T]) EXPECT() *MockPublisher_Expecter[T] {
	return &MockPublisher_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockPublisher[T]) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPublisher_Close_Call[T eventsourcing.IEventData] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPublisher_Expecter[T]) Close() *MockPublisher_Close_Call[T] {
	return &MockPublisher_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *MockPublisher_Close_Call[T]) Run(run func()) *MockPublisher_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisher_Close_Call[T]) Return(_a0 error) *MockPublisher_Close_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// Publish provides a mock function with given fields: ctx, messages
func (_m *MockPublisher[T]) Publish(ctx context.Context, messages ...T) chan error {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 chan error
	if rf, ok := ret.Get(0).(func(context.Context, ...T) chan error); ok {
		r0 = rf(ctx, messages...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call[T eventsourcing.IEventData] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//  - ctx context.Context
//  - messages ...T
func (_e *MockPublisher_Expecter[T]) Publish(ctx interface{}, messages ...interface{}) *MockPublisher_Publish_Call[T] {
	return &MockPublisher_Publish_Call[T]{Call: _e.mock.On("Publish",
		append([]interface{}{ctx}, messages...)...)}
}

func (_c *MockPublisher_Publish_Call[T]) Run(run func(ctx context.Context, messages ...T)) *MockPublisher_Publish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockPublisher_Publish_Call[T]) Return(_a0 chan error) *MockPublisher_Publish_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// PublishImmediate provides a mock function with given fields: ctx, messages
func (_m *MockPublisher[T]) PublishImmediate(ctx context.Context, messages ...T) chan error {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 chan error
	if rf, ok := ret.Get(0).(func(context.Context, ...T) chan error); ok {
		r0 = rf(ctx, messages...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// MockPublisher_PublishImmediate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishImmediate'
type MockPublisher_PublishImmediate_Call[T eventsourcing.IEventData] struct {
	*mock.Call
}

// PublishImmediate is a helper method to define mock.On call
//  - ctx context.Context
//  - messages ...T
func (_e *MockPublisher_Expecter[T]) PublishImmediate(ctx interface{}, messages ...interface{}) *MockPublisher_PublishImmediate_Call[T] {
	return &MockPublisher_PublishImmediate_Call[T]{Call: _e.mock.On("PublishImmediate",
		append([]interface{}{ctx}, messages...)...)}
}

func (_c *MockPublisher_PublishImmediate_Call[T]) Run(run func(ctx context.Context, messages ...T)) *MockPublisher_PublishImmediate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockPublisher_PublishImmediate_Call[T]) Return(_a0 chan error) *MockPublisher_PublishImmediate_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPublisher[T eventsourcing.IEventData](t mockConstructorTestingTNewMockPublisher) *MockPublisher[T] {
	mock := &MockPublisher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
